#Requires -Module smlets

# This script will run a SQL query on the Orchestrator database and find any failed runbooks since the last run and create an incident for it.
# Uses table RunbookStatusMonitor

# Settings
$SQLServer_SCO = ''
$SQLDatabase_SCO = 'Orchestrator'
$SQLServer_LastCheck = ''
$SQLDatabase_LastCheck = ''
$Runbookname = ''
$OrchestratorConsoleURL = 'http://sco01:82'
$IR_Title = 'Failed runbook'


try{
    Import-Module smlets, '.\SCSM\Powershell\Functions\Invoke-SQLQuery.ps1'
} catch {
    Throw "Could not load modules: $($_)"
}


$CheckQuery = @"
DECLARE @LastCheck datetime = (SELECT LastCheck FROM [$SQLDatabase_LastCheck].dbo.RunbookStatusMonitor)
SELECT 
    INST.[JobId] AS 'Job ID'
    ,INST.[RunbookId]
    ,RUNBOOK.Name AS 'Runbook'
    ,INST.[RunbookServerId]
    ,INST.[CreationTime]
    ,INST.[CompletionTime]

  FROM [Orchestrator].[Microsoft.SystemCenter.Orchestrator.Runtime].[RunbookInstances] AS INST
  LEFT OUTER JOIN [Orchestrator].[Microsoft.SystemCenter.Orchestrator].[Runbooks] AS RUNBOOK ON INST.RunbookId = RUNBOOK.Id

  where INST.Status = 'warning' AND
            ISNULL(@LastCheck,'1900-01-01') <= INST.CreationTime
ORDER BY INST.CreationTime DESC
"@

# Check LastCheck date
$LastCheck = Invoke-SQLQuery -Servername $SQLServer_LastCheck -Database $SQLDatabase_LastCheck -SqlCommand "SELECT LastCheck from RunbookStatusMonitor"
if ($LastCheck.Count -eq 0) {
    $LastCheck = Invoke-SQLQuery -Servername $SQLServer_LastCheck -Database $SQLDatabase_LastCheck -SqlCommand "INSERT INTO RunbookStatusMonitor (LastCheck) VALUES ('1900-01-01')"
}
elseif ($LastCheck.Count -gt 1) {
    $LastCheck = Invoke-SQLQuery -Servername $SQLServer_LastCheck -Database $SQLDatabase_LastCheck -SqlCommand "TRUNCATE TABLE RunbookStatusMonitor  INSERT INTO RunbookStatusMonitor (LastCheck) VALUES ('1900-01-01')"
}

$Result = Invoke-SQLQuery -Servername $SQLServer -Database $SQLDatabase_SCO -SqlCommand $CheckQuery

$CurrentTimeStamp = Get-Date ((Get-Date).ToUniversalTime()) -Format s
if ($Result.Count -gt 0) {

    $FirstResult = $Result | Select-Object -First 1
    
    $Runbook = $FirstResult.Runbook
    $JobID = $FirstResult.'Job ID'
    $JobCreationTime = Get-Date ($FirstResult.CreationTime -as [datetime]).ToLocalTime() -Format 'yyyy-MM-dd hh:mm:ss'
    $JobFinishTime = Get-Date ($FirstResult.CompletionTime -as [datetime]).ToLocalTime() -Format 'yyyy-MM-dd hh:mm:ss'
    $URL = $OrchestratorConsoleURL+'/#/RunbooksPage$FolderId=00000000-0000-0000-0000-000000000000&JobId=&TabId=3&Filter=Id%20eq%20guid' + "'$JobID'"
    $SCSMID = $FirstResult."SCSM ID" -replace 'NULL', ''
    $SCSMServer = $FirstResult."SCSM Server" -replace 'NULL', ''

    $hash = @{
        'Id'             = 'IR{0}';
        'Title'          = $IR_Title ;
        'Description'    = "One or more runbooks have failed the last hour:`nRunbook: $Runbook`nJob ID: $JobID`nStarted:$JobCreationTime`nFinished: $JobFinishTime`nOrchestrator console URL: $URL`n`nTicket generated by runbook: $RunbookName.";
        'TierQueue'      = '';
        'Source'         = 'IncidentSourceEnum.System';
        'Status'         = 'IncidentStatusEnum.Active';
        'Impact'         = 'System.WorkItem.TroubleTicket.ImpactEnum.Medium';
        'Urgency'        = 'System.WorkItem.TroubleTicket.UrgencyEnum.Medium';
        'Priority'       = '3';
        'Classification' = '';
    }
    $IR = New-SCSMObject -Class (Get-SCSMClass System.WorkItem.Incident$) -PropertyHashtable $hash -PassThru
    Set-SCSMObject -SMObject $IR -Property Displayname -Value "$($IR.Id) - $($IR.Title)"

    Invoke-SQLQuery -Servername $SQLServer_LastCheck -Database $SQLDatabase_LastCheck -SqlCommand "UPDATE RunbookStatusMonitor SET [LastCheck] = '$CurrentTimeStamp'" | Out-Null

}
else {
    Invoke-SQLQuery -Servername $SQLServer_LastCheck -Database $SQLDatabase_LastCheck -SqlCommand "UPDATE RunbookStatusMonitor SET [LastCheck] = '$CurrentTimeStamp'" | Out-Null
} 

